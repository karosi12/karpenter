name: Provision AWS EKS Infrastructure

on:
  push:
    branches:
      - main
      - ft-cicd

jobs:
  eks-0:
    name: Run Terraform 0-eks
    runs-on: ubuntu-latest
    outputs:
      kubeconfig: ${{ steps.get_output.outputs.kubeconfig }}
      # KUBECONFIG: ${{ steps.get_output.outputs.KUBECONFIG }}
    env:
      CLUSTER_ID: ${{ secrets.CLUSTER_ID }}
      VPC_NAME: ${{ secrets.VPC_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      REGION: ${{ secrets.REGION }}
      AZ1: ${{ secrets.AZ1 }}
      AZ2: ${{ secrets.AZ2 }}
      CIDR_BLOCK: ${{ secrets.CIDR_BLOCK }}
      ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
      PRIVATE_SUBNET1: ${{ secrets.PRIVATE_SUBNET1 }}
      PRIVATE_SUBNET2: ${{ secrets.PRIVATE_SUBNET2 }}
      PUBLIC_SUBNET1: ${{ secrets.PUBLIC_SUBNET1 }}
      PUBLIC_SUBNET2: ${{ secrets.PUBLIC_SUBNET2 }}
      CAPACITY_TYPE: ${{ secrets.CAPACITY_TYPE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set execution permissions
        working-directory: 0-eks
        run: chmod +x generate_tfvars.sh

      - name: Generate terraform.tfvars
        working-directory: 0-eks
        run: ./generate_tfvars.sh

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLI_CONFIG }}
          terraform_wrapper: false

      - name: Initialize Terraform
        run: terraform init
        working-directory: 0-eks

      - name: Plan Terraform deployment
        run: terraform plan -out=tfplan
        working-directory: 0-eks

      - name: Apply Terraform deployment
        run: terraform apply -auto-approve tfplan
        working-directory: 0-eks

      - name: Retrieve Terraform output (Kubeconfig Command)
        id: get_output
        run: |
          # echo "KUBECONFIG_COMMAND=$(terraform output -raw kubeconfig)" >> $GITHUB_ENV
          mkdir -p ~/.kube
          terraform output -raw kubeconfig > ~/.kube/config
        working-directory: 0-eks
      - name: Store Kubeconfig as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: ~/.kube/config

      # - name: Generate Kubeconfig File
      #   run: |
      #     mkdir -p ~/.kube
      #     $KUBECONFIG_COMMAND > ~/.kube/config
      #     export KUBECONFIG=~/.kube/config

  kubectl-command:
    name: Run kubectl manifest file
    runs-on: ubuntu-latest
    needs: eks-0

    env:
      KUBECONFIG: ${{ needs.eks-0.outputs.kubeconfig }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.33.1"

      - name: Download Kubeconfig Artifact
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: ~/.kube/

      - name: Configure Kubeconfig
        run: |
          echo "Setting up kubeconfig..."
          export KUBECONFIG=~/.kube/config
          kubectl config view

      - name: Run Kubectl Command
        run: kubectl apply -f karpenter.yaml
        working-directory: k8s
